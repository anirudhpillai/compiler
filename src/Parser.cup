/*
 * Docs here: https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html
*/

/* ----------------------Preliminary Declarations Section--------------------*/
import java_cup.runtime.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */


terminal           SEMI, EQ, EQEQ, PLUS, MINUS, TIMES, DIVIDE, CARET, COLON, COMMA;

// Brackets
terminal           L_ROUND, R_ROUND, L_CURLY, R_CURLY, L_ANGLE, R_ANGLE, L_SQUARE, R_SQUARE;

terminal           L_ANGLE_EQ, R_ANGLE_EQ, AND, OR, NOT, NOT_EQ;

// Types
terminal           INTEGER, BOOLEAN, CHARACTER, RATIONAL, FLOAT;
terminal           DICT, SEQ, VOID, TOP;

// Keywords
terminal           MAIN, LEN, IN, ALIAS, READ, PRINT, RETURN, BREAK;

terminal           TYPEDEF, FUNCTION_DEF;

terminal           IF, FI, THEN, ELSE_IF, ELSE, FORALL, DO, OD, LOOP, POOL;

// TODO
terminal           IDENTIFIER, ID, NUMBER;

// types
non terminal       type, number, subtype, dicttype, seqtype;

non terminal       primitive_data_type, aggregate_data_type, return_type;

non terminal       declaration, declaration_list, _declaration_list;

non terminal       statement, statements;

// values
non terminal       value, dictvalue, seqvalue, dictitems, seqitems, val;

non terminal       program, main, codeblock;

non terminal       break, loop;

non terminal       expression, operator, comparator;

non terminal       read, print;

non terminal       if_statement;

non terminal       function, function_call;


/* ------------Precedences----------- */
precedence left OR, PLUS, MINUS;
precedence left AND, TIMES, DIVIDE;
precedence nonassoc NOT, L_ANGLE, L_ANGLE_EQ, R_ANGLE, R_ANGLE_EQ, EQEQ, NOT_EQ;

/* ------------Grammar----------- */

program ::= main | declaration program | expression program | if_statement program
        | break program
        | loop program
        | read program
        | print program
        |
        ;

main ::= MAIN L_CURLY R_CURLY SEMI;

codeblock ::= expression codeblock | declaration codeblock
            | loop codeblock
            |
            ;

declaration_list ::= _declaration_list
                   |
                   ;

_declaration_list ::= declaration COMMA _declaration_list
                    | declaration
                    ;

declaration ::= IDENTIFIER COLON type SEMI
             |  IDENTIFIER COLON type EQ value SEMI;

type ::= number | dicttype | seqtype | CHARACTER;

primitive_data_type ::= INTEGER
                    | BOOLEAN
                    | CHARACTER
                    | RATIONAL
                    | FLOAT
                    ;

aggregate_data_type ::= DICT
                    | SEQ
                    ;

value ::= dictvalue | seqvalue | NUMBER;

loop ::= LOOP codeblock POOL | LOOP codeblock break codeblock POOL;

// types
number ::= INTEGER | RATIONAL | FLOAT;
subtype ::= number | BOOLEAN | CHARACTER | TOP;

dicttype ::= DICT L_ANGLE subtype COMMA subtype R_ANGLE;
seqtype ::= SEQ L_ANGLE subtype R_ANGLE;

// values
val ::= NUMBER | CHARACTER;

dictvalue ::= L_CURLY dictitems R_CURLY | L_CURLY R_CURLY;
dictitems ::= val COLON val | val COLON val COMMA dictitems;

seqvalue ::= L_SQUARE seqitems R_SQUARE | L_SQUARE R_SQUARE;
seqitems ::= val | val COMMA seqitems;

operator ::= PLUS | MINUS | TIMES | DIVIDE;
comparator ::= AND | OR | EQEQ | L_ANGLE | R_ANGLE | L_ANGLE_EQ | R_ANGLE_EQ | NOT_EQ;

print ::= PRINT expression SEMI;

read ::= READ IDENTIFIER SEMI;

expression ::= IDENTIFIER
            |  NUMBER
            |  NUMBER operator expression
            |  expression comparator expression
            |  NOT expression
            |  L_ROUND expression R_ROUND
            |  val IN IDENTIFIER
            |  val IN dictvalue
            ;

break ::= BREAK SEMI | BREAK NUMBER SEMI;

if_statement ::= IF L_ROUND expression R_ROUND THEN codeblock FI
              |  IF L_ROUND expression R_ROUND THEN codeblock ELSE codeblock FI
              ;

//Functions
function ::= FUNCTION_DEF IDENTIFIER L_ROUND declaration_list R_ROUND L_CURLY statements R_CURLY COLON return_type SEMI;

return_type ::= primitive_data_type
              | aggregate_data_type
              | VOID
              ;

statements ::= statements statement
             |
             ;

statement ::= function_call SEMI
            | RETURN expression SEMI
            | declaration SEMI
            | if_statement
            | RETURN SEMI
            | read SEMI
            | print SEMI
            ;