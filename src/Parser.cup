/*
 * Docs here: https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html
*/

/* ----------------------Preliminary Declarations Section--------------------*/
import java_cup.runtime.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */


terminal           SEMI, EQ, EQEQ, PLUS, MINUS, TIMES, DIVIDE, CARET, COLON, COMMA, QUOTE;

// Brackets
terminal           L_ROUND, R_ROUND, L_CURLY, R_CURLY, L_ANGLE, R_ANGLE, L_SQUARE, R_SQUARE;

terminal           L_ANGLE_EQ, R_ANGLE_EQ, AND, OR, NOT, NOT_EQ;

// Types
terminal           INTEGER, BOOLEAN, RATIONAL, FLOAT, CHARACTER;
terminal           DICT, SEQ, VOID, TOP;

// Keywords
terminal           MAIN, LEN, IN, ALIAS, READ, PRINT, RETURN, BREAK, CONCAT;

terminal           TYPEDEF, FUNCTION_DEF;

terminal           IF, FI, THEN, ELSE_IF, ELSE, LOOP, POOL;

// TODO
terminal           IDENTIFIER, NUMBER, STRING;

// types
non terminal       type, number, subtype, dicttype, seqtype;

non terminal       assignment, declaration, params, _params;

// values
non terminal       value, _value, dictvalue, seqvalue, dictitems, seqitems, val;

non terminal       program, main, codeblock;

non terminal       break, loop;

non terminal       expression, operator, comparator;

non terminal       read, print;

non terminal       if_statement, return_statement;

non terminal       function, return_type;

non terminal       tdef;


/* ------------Precedences----------- */
precedence left OR, PLUS, MINUS;
precedence left AND, TIMES, DIVIDE;
precedence left CONCAT;
precedence right IN;
precedence nonassoc NOT, L_ANGLE, L_ANGLE_EQ, R_ANGLE, R_ANGLE_EQ, EQEQ, NOT_EQ;

/* ------------Grammar----------- */

program ::= codeblock main codeblock;

main ::= MAIN L_CURLY codeblock R_CURLY SEMI;

codeblock ::= declaration SEMI codeblock
            | assignment codeblock
            | expression SEMI codeblock
            | loop codeblock
            | function codeblock
            | if_statement codeblock
            | return_statement codeblock
            | read codeblock
            | print codeblock
            | tdef codeblock
            | break codeblock
            |
            ;


_params ::= declaration
        | declaration COMMA _params
        ;

params ::= _params |;

declaration ::= IDENTIFIER COLON type;
assignment ::=  IDENTIFIER COLON type EQ value SEMI
            |   IDENTIFIER EQ value SEMI;


// types
// As type can be custom made using tdef, we need to include identifiers
type ::= number | dicttype | seqtype | CHARACTER | IDENTIFIER;

number ::= INTEGER | RATIONAL | FLOAT;

// As type can be custom made using tdef, we need to include identifiers
subtype ::= number | BOOLEAN | CHARACTER | TOP | IDENTIFIER;

dicttype ::= DICT L_ANGLE subtype COMMA subtype R_ANGLE;
seqtype ::= SEQ L_ANGLE subtype R_ANGLE;

// Values
value ::= expression | expression COMMA value;

dictvalue ::= L_CURLY dictitems R_CURLY | L_CURLY R_CURLY;
dictitems ::= expression COLON expression
           |  expression COLON expression COMMA dictitems;

seqvalue ::= L_SQUARE seqitems R_SQUARE
          |  L_SQUARE R_SQUARE
          |  STRING;
seqitems ::= expression | expression COMMA seqitems;

// Expression
expression ::= expression operator expression
            |  expression comparator expression
            |  expression CONCAT expression
            |  expression IN expression
            |  NOT expression
            |  L_ROUND expression R_ROUND
            |  dictvalue
            |  seqvalue
            |  BOOLEAN
            |  NUMBER
            |  CHARACTER
            |  IDENTIFIER
            ;


operator ::= PLUS | MINUS | TIMES | DIVIDE;
comparator ::= AND | OR | EQEQ | L_ANGLE | R_ANGLE | L_ANGLE_EQ | R_ANGLE_EQ | NOT_EQ;


// I/O
print ::= PRINT expression SEMI;
read ::= READ IDENTIFIER SEMI;

// loop
loop ::= LOOP codeblock POOL;
break ::= BREAK SEMI | BREAK NUMBER SEMI;

if_statement ::= IF L_ROUND expression R_ROUND THEN codeblock FI
              |  IF L_ROUND expression R_ROUND THEN codeblock ELSE codeblock FI
              ;

return_statement ::= RETURN SEMI | RETURN expression SEMI;

//Functions
function ::= FUNCTION_DEF IDENTIFIER L_ROUND params R_ROUND L_CURLY codeblock R_CURLY return_type SEMI;
return_type ::= COLON type |;

// Typedef
tdef ::= TYPEDEF IDENTIFIER L_CURLY params R_CURLY SEMI;
