/*
 * Docs here: https://www.cs.princeton.edu/~appel/modern/java/CUP/manual.html
*/

/* ----------------------Preliminary Declarations Section--------------------*/
import java_cup.runtime.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    public boolean syntaxErrors;

    public void syntax_error(Symbol current_token) {
        report_error(
            "Syntax error at line " + (current_token.left+1) + ", column "
            + current_token.right, null
        );
    }
:};



/* ------------Declaration of Terminals and Non Terminals Section----------- */
terminal           SEMI, EQ, EQEQ, PLUS, MINUS, TIMES, DIVIDE, IMPLY, CARET, COLON, COMMA, QUESTION, DOT;
terminal           L_ROUND, R_ROUND, L_CURLY, R_CURLY, L_ANGLE, R_ANGLE, L_SQUARE, R_SQUARE;
terminal           L_ANGLE_EQ, R_ANGLE_EQ, AND, OR, NOT, NOT_EQ;
terminal           INTEGER, BOOLEAN, RATIONAL, FLOAT, CHARACTER, DICT, SEQ, TOP;
terminal           MAIN, IN, READ, PRINT, RETURN, BREAK, CONCAT, TYPEDEF, ALIAS, FUNCTION_DEF;
terminal           IF, FI, THEN, ELSE, LOOP, POOL;
terminal           IDENTIFIER, NUMBER, STRING;

non terminal       program, program_block, main, codeblock, identifier, accessor;
non terminal       type, subtype, dicttype, seqtype;
non terminal       expression_list, dictvalue, seqvalue, dictitems, seqitems;
non terminal       expression, operator, comparator, expression_or_null;
non terminal       declarations, declaration, type_declaration, assignment, tdef, alias;
non terminal       statements, statement, print, read, loop, break, if_statement, return_statement;
non terminal       function, function_call, return_type, args, _args, params, _params;

non terminal       statement_with_break, statements_with_break, if_statement_with_break, codeblock_with_break;


/* ------------Precedences----------- */
precedence left OR, PLUS, MINUS;
precedence left AND, TIMES, DIVIDE;
precedence left CONCAT;
precedence right IN;
precedence nonassoc NOT, L_ANGLE, L_ANGLE_EQ, R_ANGLE, R_ANGLE_EQ, EQEQ, NOT_EQ;
precedence nonassoc IMPLY;


/* ------------Grammar----------- */
program ::= program_block main program_block;

program_block ::= declarations statements | declarations;

main ::= MAIN L_CURLY codeblock R_CURLY SEMI;

codeblock ::= declarations statements;

// Identifier
identifier ::= accessor DOT identifier | accessor;
accessor ::= IDENTIFIER
             | IDENTIFIER L_SQUARE expression R_SQUARE
             | IDENTIFIER L_SQUARE expression_or_null COLON expression_or_null R_SQUARE
             | function_call
             | function_call L_SQUARE expression R_SQUARE
             | function_call L_SQUARE expression_or_null COLON expression_or_null R_SQUARE
             ;

// Types
type ::= dicttype | seqtype | CHARACTER | INTEGER | RATIONAL | FLOAT | IDENTIFIER;
subtype ::= type | TOP;
dicttype ::= DICT L_ANGLE subtype COMMA subtype R_ANGLE;
seqtype ::= SEQ L_ANGLE subtype R_ANGLE;

// Values
expression_list ::= expression | expression COMMA expression_list;

dictvalue ::= L_CURLY dictitems R_CURLY | L_CURLY R_CURLY;
dictitems ::= expression COLON expression
            | expression COLON expression COMMA dictitems;

seqvalue ::= L_SQUARE seqitems R_SQUARE
           | L_SQUARE R_SQUARE
           | STRING;
seqitems ::= expression | expression COMMA seqitems;

// Expression
operator ::= PLUS | MINUS | TIMES | DIVIDE;
comparator ::= AND | OR | EQEQ | IMPLY | L_ANGLE | R_ANGLE | L_ANGLE_EQ | R_ANGLE_EQ | NOT_EQ;

expression ::= expression operator expression
             | expression comparator expression
             | expression CONCAT expression
             | expression IN expression
             | NOT expression
             | L_ROUND expression R_ROUND
             | dictvalue
             | seqvalue
             | BOOLEAN
             | MINUS expression
             | NUMBER
             | CHARACTER
             | identifier
             ;

expression_or_null ::= expression |;

// Declarations
declarations ::= declarations declaration|;
declaration ::= type_declaration SEMI
			  | type_declaration EQ expression_list SEMI
              | tdef
              | alias
              | function
              ;

type_declaration ::= IDENTIFIER COLON type;

tdef ::= TYPEDEF IDENTIFIER L_CURLY params R_CURLY SEMI;
alias ::= ALIAS type type SEMI;

// Statement
statements ::= statement statements | statement;

statement ::= loop
            | if_statement
            | read
            | print
            | assignment
            | return_statement
            | function_call SEMI
            ;
/* Experimenting */
codeblock_with_break ::= declarations statements_with_break;
statements_with_break ::= statement_with_break statements_with_break | statement_with_break;

statement_with_break ::= loop
            | break
            | if_statement_with_break
            | read
            | print
            | assignment
            | return_statement
            | function_call SEMI
            ;

if_statement_with_break ::= IF L_ROUND expression R_ROUND THEN codeblock_with_break FI
               | IF L_ROUND expression R_ROUND THEN codeblock_with_break ELSE codeblock_with_break FI
               ;

/* Experimenting */

assignment ::= identifier EQ expression_list SEMI;

print ::= PRINT expression SEMI;
read ::= READ identifier SEMI;
loop ::= LOOP codeblock_with_break POOL;
break ::= BREAK SEMI | BREAK NUMBER SEMI;
return_statement ::= RETURN SEMI | RETURN expression SEMI;
if_statement ::= IF L_ROUND expression R_ROUND THEN codeblock FI
               | IF L_ROUND expression R_ROUND THEN codeblock ELSE codeblock FI
               ;

// Functions
_params ::= type_declaration | type_declaration COMMA _params;
params ::= _params |;

_args ::= expression | expression COMMA _args;
args ::= _args |;

function_call ::= QUESTION expression QUESTION IDENTIFIER L_ROUND args R_ROUND;

function ::= FUNCTION_DEF IDENTIFIER L_ROUND params R_ROUND L_CURLY codeblock R_CURLY return_type SEMI;

return_type ::= COLON type |;
